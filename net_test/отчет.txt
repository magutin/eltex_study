/********************************************************/
/*			Отчет				*/
/*	по разработанной программе тестирования 	*/
/*		проводного канала связи			*/
/********************************************************/
/*			Содержание			*/
/* 1) Выполненные работы				*/
/* 2) НЕ Выполненные работы				*/
/* 3) Описание команд					*/
/* 4) Описание работы программы				*/
/* 5) ВНИМАНИЕ ЖЕСТКИЙ КОСЯК				*/
/* 6) Сценарии для MakeFile				*/
/* 7) Запуск программ					*/
/* 8) Используемые библиотеки				*/
/********************************************************/




/--------------------------------------------------------/
/		     Что Выполнено			 /
/--------------------------------------------------------/
[1] Выполнен тест последовательной передачи пакетов.
[2] Выполнен тест расчета задержки доставки пакетов
    (пинг).
[3] Выполнен тест пропускной способности канла.
[4] Автодобавление команд по TAB-у.
[5] Управление настройками тестов с сервера, с передачей 
    настроек клиенту.
[6] Вывод результатов выполнениея теста в файл (со 
    стороны клиента).
[7] Тестрирование происходило в рамках одного ПК. Для двух
    ПК тест не выполнялся,за неимением второго.
[8] Написан MakeFile.
[9] Интерфейс cli.
/--------------------------------------------------------/





/--------------------------------------------------------/
/		     Что НЕ Выполнено			 /
/--------------------------------------------------------/
[1] Под вопросом реализация теста последовательной 
    передачи пакетов. Не совсем понятно, что нужно из ТЗ.
    То ли исскуственно нарушать последовательность передачи,
    то ли проводить тест на выявление нарушения последова-
    тельности.
[2] Под вопросом тест на загруженность канала. Так и не 
    понял как это должно выглядеть, и в RFC2544 об этом не
    нашел. Поэтому реализовал пропускную способность с 
    возможность задать максимальный размер пакета.И 
    вычислением оптимальной скорости передачи для канала.
[3] Тегирование пакетов (поддержка 802.1q,802.1p).
    Насколько я понял это относится к VLAN. Просто не до
    конца успел разобраться в вопросе.
[4] Отправка результатов теста на сервер файлом. Просто 
    ошибка при написании главного сокета сервера. Который
    изначально умеет только посылать команду,и ждать 
    подтверждения от клиента. Думаю нужно было либо 
    использовать сокет TCP. Либо запускать еще один поток
    чисто для приема.
/--------------------------------------------------------/





/--------------------------------------------------------/
/			Описание команд			 /
/--------------------------------------------------------/
 - Сервер при запуске предлагает 3 главные команды:
   set	- Посылает команду клиенту на установку настроек 
   	  для теста
   	 [!] миксуется с командами seq, ping, load.

   run	- Посылает команду клиенту на старт теста.
   	 [!] миксуется с командами seq, ping, load, turnoff.

   quit - Завершает работу сервера.

 - Дополнительные команды к set:
   	set seq  - установка настроек для первого теста. 
   		   Последовательнось передачи пакетов.
   	set ping - установка настроек для второго теста.
   	           Определение задержки доставки пакетов.
   	           (ПИНГ).
   	set load - установка настроек для третьего теста.  

 - Дополнительные команды к run:
   	run seq     - Команда клиенту запустить первый тест.
   	              Последовательность передачи.
   	run ping    - Команда клиенту запустить второй тест.
   		      (ПИНГ)
   	run load    - Команда клиенту запустить второй тест.
   	              Пропускная способность.
   	run turnoff - Команда клиенту Выключиться.

 - Параметры передаваемые командам:
 для run это дополнительные команды.
 	Пример: run <cmd>
 		    <cmd> подразумевает один из параметров:
 		    - seq
 		    - ping
 		    - load
 		    - turnoff

 для set это дополнительные команды.
 	Пример: set <cmd>
 		    <cmd> подразумевает один из параметров:
 		    - seq
 		    - ping
 		    - load
 - Списки аргументов для дополнительных команд (относится 
    только к основной команде set !):
    Примеры:
  1) set seq <type_proto> <len_ptk> <cnt_ptk> <time_test> 
    	    <type_proto> - Тип протокола ("-T" или "-U").
    	     <len_ptk>   - длинна пакета без заголовков.
    	     	           Максимальные длины для "-T" 
    	     	           это 65495,для "-U" это 65507.
    	     <cnt_ptk>   - Количество пакетов для теста.
    	     <time_test> - Время проведения теста.

  2) set ping <cnt_ptk> <time_test> 
    	     <cnt_ptk>   - Количество пакетов для теста.
    	     <time_test> - Время проведения теста.
    Тип пакета по умолчанию ICMP и изменять его нельзя.
    Длина пакета по умолчанию 64 байта вместе с заголовками
    IP и ICMP.Изменять нельзя.

  3) set load <type_proto> <len_ptk> 
  	      <type_proto> - Тип протокола ("-U").
  	      	             С TCP не вышло реализовать,
  	      	             поэтому только UDP.
    	       <len_ptk>   - длинна пакета без заголовков.
    	                     Максимальная для "-U" это 65507.

/--------------------------------------------------------/






/--------------------------------------------------------/
/		Описание работы программы		 /
/--------------------------------------------------------/
   При запуске сервер предлагает пользователю ввести 
команды.Подсказка по командам печатается при нажатии TAB.
И автодополнение команды тоже по TAB.(Если был введен 
хотя бы один символ команды).
   Сперва необходимо отправить клиенту настройки для теста.
через set.Клиент разберет ее,и поготовит сокет,который 
запускается отдельным потоком для выполнения. Сервер так же
подготовит свой поток с сокетом для теста.
   После отправки настроек клиенту.Необходимо отправить 
клиенту команду начала теста через run. После чего на стороне
сервера запустится сокет для приема. А на стороне клиента 
сокет для передачи. И начнется проведение теста.
   После завершения теста, потоки с сокетами закрываются.
И клиент записывает результаты в соответствующий файл,в папке
"out_files".
  Для корректной завершения работы клиенту необходимо 
отправить команду на завершение работы "run turnoff". А на
стороне сервера для завершения работы ввести команду "quit". 
/--------------------------------------------------------/






/--------------------------------------------------------/
/		ВНИМАНИЕ ЖЕСТКИЙ КОСЯК			 /
/--------------------------------------------------------/
  Для вывода команд в cli,и автодополнение команд использо-
валась библиотека ncurses. С отключением стандартных клю-
чей для клавиш. Каким-то образом клавиша backspace не 
читается в ncurses. И вообще как я почитал, это довольно
ненадежный ключ в этой библиотеке. Поэтому удаление символа 
не работает. Это можно сделать через TAB,занулив строку
команды. Либо через enter, чтобы получить неправильный тип
команды и занулить буфер.
/--------------------------------------------------------/






/--------------------------------------------------------/
/		  Сценарии для MakeFile			 /
/--------------------------------------------------------/
так же можно получить через: make -f MakeFile help
 make -f Makefile [options]
	
	[options]
	all	  - Скомпилировать и клиент и сервер.
	build_srv - Скомпилировать сервер.
	build_cln - Скомпилировать клиент.
	clean	  - Очистить все файлы (elf.).
	clean_cln - Очистить только клиент.
	clean_srv - Очистить только сервер.
/--------------------------------------------------------/





/--------------------------------------------------------/
/		    Запуск программ			 /
/--------------------------------------------------------/
sudo ./srv 
sudo ./cln 192.168.1.1 (ip сервера)
/--------------------------------------------------------/





/--------------------------------------------------------/
/ 		Используемые библиотеки			 /
/--------------------------------------------------------/
-pthread
-lncurses
/--------------------------------------------------------/
